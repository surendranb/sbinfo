---
import FloatingElements from './FloatingElements.astro';
---

<section class="relative min-h-[85vh] flex items-center overflow-hidden">
  <div class="absolute inset-0">
    <div class="absolute inset-0 bg-gradient-to-br from-white via-gray-50/90 to-white z-10"></div>
    
    <div class="absolute inset-0 transition-opacity duration-1000" id="image-carousel">
      <div class="absolute inset-0 bg-cover bg-center opacity-15 transform scale-105 transition-transform duration-1000" 
           style="background-image: url('/images/sunset-1.jpg');" 
           data-index="0"></div>
      <div class="absolute inset-0 bg-cover bg-center opacity-0 transform scale-105 transition-transform duration-1000" 
           style="background-image: url('/images/sunset-2.jpg');" 
           data-index="1"></div>
      <div class="absolute inset-0 bg-cover bg-center opacity-0 transform scale-105 transition-transform duration-1000" 
           style="background-image: url('/images/golden-gate.jpg');" 
           data-index="2"></div>
    </div>
  </div>

  <FloatingElements />

  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-40">
    <div class="max-w-3xl">
      <p class="text-accent font-medium tracking-wide mb-6 reveal" style="animation-delay: 100ms">
        Hello there! I'm
      </p>
      
      <div class="space-y-4">
        <h1 class="text-7xl sm:text-8xl font-space-grotesk font-bold leading-tight reveal" style="animation-delay: 200ms">
          Surendran
        </h1>
        
        <div class="h-1 w-24 bg-accent rounded-full reveal" style="animation-delay: 300ms"></div>
      </div>
      
      <p class="mt-8 text-xl sm:text-2xl text-primary leading-relaxed font-light max-w-2xl reveal" style="animation-delay: 400ms">
        I like solving hard problems, building thing from scratch, growing teams & tinkering with the latest technology.
      </p>
      
      <p class="mt-6 text-lg text-primary/70 leading-relaxed reveal" style="animation-delay: 500ms">
        Currently I'm building the AI Taskforce at Atlan & helped build our inbound growth marketing engine. <br>Before this I helped build & scale Change.org in India (from thousands to millions of users) as a part of the founding team and founded the Indian Youth Climate Network, the largest youth-run nonprofit.
      </p>

      <!-- <div class="mt-12 reveal" style="animation-delay: 600ms">
        <a href="#work" class="group inline-flex items-center space-x-2 text-primary hover:text-accent transition-colors duration-300">
          <span class="text-sm font-medium">Explore My Work</span>
          <svg class="w-4 h-4 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
          </svg>
          <div class="absolute bottom-0 left-0 h-px w-full bg-accent/20 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300 origin-left"></div>
        </a>
      </div> -->
    </div>
  </div>

  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 z-40">
    <div class="animate-bounce">
      <svg class="w-6 h-6 text-primary/30" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
      </svg>
    </div>
  </div>
</section>

<script>
  // Mouse follow effect
  document.addEventListener('mousemove', (e) => {
    const x = e.clientX / window.innerWidth;
    const y = e.clientY / window.innerHeight;
    
    document.documentElement.style.setProperty('--mouse-x', x.toString());
    document.documentElement.style.setProperty('--mouse-y', y.toString());
  });

  // Image carousel
  const images = document.querySelectorAll('[data-index]');
  let currentIndex = 0;
  
  function nextImage() {
    images[currentIndex].classList.add('opacity-0');
    currentIndex = (currentIndex + 1) % images.length;
    images[currentIndex].classList.remove('opacity-0');
    images[currentIndex].classList.add('opacity-15');
  }

  setInterval(nextImage, 5000);

  // Parallax effect
  let lastScrollY = window.scrollY;
  const imageElements = document.querySelectorAll('[data-index]');
  
  window.addEventListener('scroll', () => {
    const scrolled = window.scrollY;
    const speed = 0.15;
    const offset = (scrolled - lastScrollY) * speed;
    
    imageElements.forEach(element => {
      const currentTransform = getComputedStyle(element).transform;
      const scale = 1.05;
      element.style.transform = `scale(${scale}) translateY(${offset}px)`;
    });
    
    lastScrollY = scrolled;
  });

  // Reveal animations on scroll
  const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: 0.1
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('reveal');
      }
    });
  }, observerOptions);

  document.querySelectorAll('.reveal').forEach((element) => {
    observer.observe(element);
  });
</script>